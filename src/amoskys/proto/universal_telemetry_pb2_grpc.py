# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import messaging_schema_pb2 as messaging__schema__pb2
from . import universal_telemetry_pb2 as universal__telemetry__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in universal_telemetry_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UniversalEventBusStub(object):
    """gRPC service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/messaging.UniversalEventBus/Publish',
                request_serializer=messaging__schema__pb2.Envelope.SerializeToString,
                response_deserializer=messaging__schema__pb2.PublishAck.FromString,
                _registered_method=True)
        self.PublishTelemetry = channel.unary_unary(
                '/messaging.UniversalEventBus/PublishTelemetry',
                request_serializer=universal__telemetry__pb2.UniversalEnvelope.SerializeToString,
                response_deserializer=universal__telemetry__pb2.UniversalAck.FromString,
                _registered_method=True)
        self.PublishBatch = channel.unary_unary(
                '/messaging.UniversalEventBus/PublishBatch',
                request_serializer=universal__telemetry__pb2.TelemetryBatch.SerializeToString,
                response_deserializer=universal__telemetry__pb2.UniversalAck.FromString,
                _registered_method=True)
        self.RegisterDevice = channel.unary_unary(
                '/messaging.UniversalEventBus/RegisterDevice',
                request_serializer=universal__telemetry__pb2.DeviceRegistration.SerializeToString,
                response_deserializer=universal__telemetry__pb2.DeviceRegistrationResponse.FromString,
                _registered_method=True)
        self.UpdateDevice = channel.unary_unary(
                '/messaging.UniversalEventBus/UpdateDevice',
                request_serializer=universal__telemetry__pb2.DeviceRegistration.SerializeToString,
                response_deserializer=universal__telemetry__pb2.DeviceRegistrationResponse.FromString,
                _registered_method=True)
        self.DeregisterDevice = channel.unary_unary(
                '/messaging.UniversalEventBus/DeregisterDevice',
                request_serializer=universal__telemetry__pb2.DeviceDeregistration.SerializeToString,
                response_deserializer=universal__telemetry__pb2.DeviceDeregistrationResponse.FromString,
                _registered_method=True)
        self.GetHealth = channel.unary_unary(
                '/messaging.UniversalEventBus/GetHealth',
                request_serializer=universal__telemetry__pb2.HealthRequest.SerializeToString,
                response_deserializer=universal__telemetry__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/messaging.UniversalEventBus/GetStatus',
                request_serializer=universal__telemetry__pb2.StatusRequest.SerializeToString,
                response_deserializer=universal__telemetry__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/messaging.UniversalEventBus/GetMetrics',
                request_serializer=universal__telemetry__pb2.MetricsRequest.SerializeToString,
                response_deserializer=universal__telemetry__pb2.MetricsResponse.FromString,
                _registered_method=True)


class UniversalEventBusServicer(object):
    """gRPC service definitions
    """

    def Publish(self, request, context):
        """Legacy methods (backward compatibility)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishTelemetry(self, request, context):
        """New universal methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDevice(self, request, context):
        """Device management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeregisterDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHealth(self, request, context):
        """Health and status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UniversalEventBusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=messaging__schema__pb2.Envelope.FromString,
                    response_serializer=messaging__schema__pb2.PublishAck.SerializeToString,
            ),
            'PublishTelemetry': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishTelemetry,
                    request_deserializer=universal__telemetry__pb2.UniversalEnvelope.FromString,
                    response_serializer=universal__telemetry__pb2.UniversalAck.SerializeToString,
            ),
            'PublishBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishBatch,
                    request_deserializer=universal__telemetry__pb2.TelemetryBatch.FromString,
                    response_serializer=universal__telemetry__pb2.UniversalAck.SerializeToString,
            ),
            'RegisterDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDevice,
                    request_deserializer=universal__telemetry__pb2.DeviceRegistration.FromString,
                    response_serializer=universal__telemetry__pb2.DeviceRegistrationResponse.SerializeToString,
            ),
            'UpdateDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDevice,
                    request_deserializer=universal__telemetry__pb2.DeviceRegistration.FromString,
                    response_serializer=universal__telemetry__pb2.DeviceRegistrationResponse.SerializeToString,
            ),
            'DeregisterDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeregisterDevice,
                    request_deserializer=universal__telemetry__pb2.DeviceDeregistration.FromString,
                    response_serializer=universal__telemetry__pb2.DeviceDeregistrationResponse.SerializeToString,
            ),
            'GetHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHealth,
                    request_deserializer=universal__telemetry__pb2.HealthRequest.FromString,
                    response_serializer=universal__telemetry__pb2.HealthResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=universal__telemetry__pb2.StatusRequest.FromString,
                    response_serializer=universal__telemetry__pb2.StatusResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=universal__telemetry__pb2.MetricsRequest.FromString,
                    response_serializer=universal__telemetry__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging.UniversalEventBus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging.UniversalEventBus', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UniversalEventBus(object):
    """gRPC service definitions
    """

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/Publish',
            messaging__schema__pb2.Envelope.SerializeToString,
            messaging__schema__pb2.PublishAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishTelemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/PublishTelemetry',
            universal__telemetry__pb2.UniversalEnvelope.SerializeToString,
            universal__telemetry__pb2.UniversalAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/PublishBatch',
            universal__telemetry__pb2.TelemetryBatch.SerializeToString,
            universal__telemetry__pb2.UniversalAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/RegisterDevice',
            universal__telemetry__pb2.DeviceRegistration.SerializeToString,
            universal__telemetry__pb2.DeviceRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/UpdateDevice',
            universal__telemetry__pb2.DeviceRegistration.SerializeToString,
            universal__telemetry__pb2.DeviceRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeregisterDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/DeregisterDevice',
            universal__telemetry__pb2.DeviceDeregistration.SerializeToString,
            universal__telemetry__pb2.DeviceDeregistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/GetHealth',
            universal__telemetry__pb2.HealthRequest.SerializeToString,
            universal__telemetry__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/GetStatus',
            universal__telemetry__pb2.StatusRequest.SerializeToString,
            universal__telemetry__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.UniversalEventBus/GetMetrics',
            universal__telemetry__pb2.MetricsRequest.SerializeToString,
            universal__telemetry__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
