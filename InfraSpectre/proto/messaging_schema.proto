// proto/messaging_schema.proto

syntax = "proto3";                             // We’re using Proto3 syntax (recommended).

package infraspectre.messaging;                // Namespacing for generated code.


// ─── Envelope ─────────────────────────────────────────────────────────────

// A generic wrapper that every agent uses to publish any kind of event.
// This lets subscribers (e.g. SomaCore) handle all messages uniformly.
message Envelope {
  string version = 1;                // "v1"
  uint64 ts_ns = 2;                  // event creation time (nanoseconds)
  string idempotency_key = 3;        // stable dedupe key
  oneof payload {                    // extend over time
    FlowEvent flow = 10;
    ProcessEvent proc = 11;
  }
  bytes sig = 20;                    // agent signature
  bytes prev_sig = 21;               // hash-chain for tamper-evidence
}


// ─── EventType Enumeration ─────────────────────────────────────────────────────

// Defines every payload type your agents can emit.
enum EventType {
  UNKNOWN_EVENT       = 0;  // Fallback/invalid.
  FLOW_EVENT          = 1;  // From FlowAgent-In/Out.
  PROCESS_EVENT       = 2;  // From ProcessAgent.
  THREAT_INTEL_EVENT  = 3;  // From ThreatIntelAgent.
  VULN_SCAN_EVENT     = 4;  // From VulnAgent.
  DECISION_EVENT      = 5;  // From NeuroSentinel.
  PROFILE_EVENT       = 6;  // From ProfilingAgent.
}


// ─── FlowEvent Payload ──────────────────────────────────────────────────────────

// The data structure for network flows captured by FlowAgent.
message FlowEvent {
  string  flow_id      = 1;  // Correlate start/end of a single flow.
  string  src_ip       = 2;  // Source IP address.
  uint32  src_port     = 3;  // Source port.
  string  dst_ip       = 4;  // Destination IP address.
  uint32  dst_port     = 5;  // Destination port.
  string  protocol     = 6;  // "TCP", "UDP", etc.
  uint64  bytes_sent   = 7;  // Total bytes sent from src → dst.
  uint64  bytes_recv   = 8;  // Total bytes sent from dst → src.
  uint32  flags        = 9;  // TCP flag bitmask.
  int64   start_time   = 10; // UNIX epoch ms when flow began.
  int64   end_time     = 11; // UNIX epoch ms when flow ended.
}


// ─── ProcessEvent Payload (stub) ──────────────────────────────────────────

// The data structure for processes captured by ProcessAgent.
message ProcessEvent {
  string process_id = 1;
  string agent_id = 2;
  string command = 3;
  int64 start_time = 4;
  int64 end_time = 5;
}


// ─── PublishAck ───────────────────────────────────────────────────────────

// Acknowledgment for Publish calls.
message PublishAck {
  enum Status {
    OK = 0;
    RETRY = 1;
    INVALID = 2;
    UNAUTHORIZED = 3;
  }
  Status status = 1;
  string reason = 2;
  uint32 backoff_hint_ms = 3;
}


// ─── EventBus Service Definition ────────────────────────────────────────────────

// gRPC service that all agents use to publish/subscribe Events.
service EventBus {
  // Agents call this RPC to publish an Envelope.
  rpc Publish(Envelope) returns (PublishAck);
  // rpc Subscribe(Topic) returns (stream Envelope);  // later
}


// ─── Reserved tags for future removals ────────────────────────────────────

// Reserved tags for future use.
reserved 100 to 199;
